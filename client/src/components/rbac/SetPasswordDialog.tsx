import { useState } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { Eye, EyeOff, Copy, Download, AlertTriangle, Shield, CheckCircle } from "lucide-react";
import { cn } from "@/lib/utils";

interface User {
  id: number;
  email: string;
  resource?: {
    name: string;
  };
}

interface SetPasswordDialogProps {
  user: User | null;
  isOpen: boolean;
  onClose: () => void;
}

interface PasswordResetResponse {
  success: boolean;
  message: string;
}

export function SetPasswordDialog({ user, isOpen, onClose }: SetPasswordDialogProps) {
  const [step, setStep] = useState<'confirm' | 'display'>('confirm');
  const [generatedPassword, setGeneratedPassword] = useState<string>('');
  const [isPasswordVisible, setIsPasswordVisible] = useState(false);
  const [isClosing, setIsClosing] = useState(false);
  
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Reset state when dialog opens/closes
  const handleOpenChange = (open: boolean) => {
    if (!open) {
      handleClose();
    }
  };

  const handleClose = () => {
    setIsClosing(true);
    setTimeout(() => {
      setStep('confirm');
      setGeneratedPassword('');
      setIsPasswordVisible(false);
      setIsClosing(false);
      onClose();
    }, 150);
  };

  // Password reset mutation (temporary endpoint via ping)
  const resetPasswordMutation = useMutation({
    mutationFn: async (userId: number): Promise<{ password: string }> => {
      const response = await apiRequest(`/api/ping?action=reset-password&userId=${userId}`, {
        method: 'POST',
      });
      return response;
    },
    onSuccess: (data) => {
      setGeneratedPassword(data.password);
      setStep('display');
      toast({
        title: "Password Reset Successful",
        description: `New password generated for ${user?.resource?.name || user?.email}`,
      });
      // Invalidate users query to refresh any audit information
      queryClient.invalidateQueries({ queryKey: ["/api/rbac/users"] });
    },
    onError: (error: any) => {
      toast({
        title: "Password Reset Failed",
        description: error.message || "Failed to reset password",
        variant: "destructive",
      });
    },
  });

  const handleConfirmReset = () => {
    if (user) {
      resetPasswordMutation.mutate(user.id);
    }
  };

  const handleCopyPassword = async () => {
    try {
      await navigator.clipboard.writeText(generatedPassword);
      toast({
        title: "Copied to Clipboard",
        description: "Password has been copied to clipboard",
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Failed to copy password to clipboard",
        variant: "destructive",
      });
    }
  };

  const handleDownloadPassword = () => {
    const username = user?.resource?.name || user?.email || 'user';
    const timestamp = new Date().toISOString().split('T')[0];
    const filename = `password_reset_${username.replace(/[^a-zA-Z0-9]/g, '_')}_${timestamp}.txt`;
    
    const content = `Password Reset Information
========================

User: ${user?.resource?.name || 'N/A'}
Email: ${user?.email}
Generated: ${new Date().toLocaleString()}
Temporary Password: ${generatedPassword}

SECURITY INSTRUCTIONS:
- This is a temporary password that should be changed on first login
- Share this information securely with the user
- Do not send this password via email or unsecured channels
- Consider using encrypted communication or secure password managers
- Rotate this password if shared over insecure channels
- Delete this file after the user has received the password

Generated by Resource Planning Tracker Admin Panel`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    toast({
      title: "Password File Downloaded",
      description: `Password information saved as ${filename}`,
    });
  };

  if (!user) return null;

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogContent className={cn(
        "sm:max-w-[500px] transition-all duration-150",
        isClosing && "scale-95 opacity-0"
      )}>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5 text-blue-600" />
            {step === 'confirm' ? 'Reset User Password' : 'Password Generated'}
          </DialogTitle>
          <DialogDescription>
            {step === 'confirm' 
              ? `Generate a new random password for ${user.resource?.name || user.email}`
              : 'Secure password has been generated and is ready for distribution'
            }
          </DialogDescription>
        </DialogHeader>

        {step === 'confirm' && (
          <div className="space-y-4">
            <Alert>
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                This will generate a new random password for <strong>{user.resource?.name || user.email}</strong> and replace any existing password. 
                The user will need to use this new password to log in.
              </AlertDescription>
            </Alert>

            <div className="bg-gray-50 rounded-lg p-4 space-y-2">
              <div className="text-sm font-medium text-gray-700">User Information:</div>
              <div className="text-sm text-gray-600">
                <div><strong>Name:</strong> {user.resource?.name || 'N/A'}</div>
                <div><strong>Email:</strong> {user.email}</div>
              </div>
            </div>

            <div className="flex gap-3 justify-end">
              <Button variant="outline" onClick={handleClose} disabled={resetPasswordMutation.isPending}>
                Cancel
              </Button>
              <Button 
                onClick={handleConfirmReset} 
                disabled={resetPasswordMutation.isPending}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {resetPasswordMutation.isPending ? 'Generating...' : 'Generate New Password'}
              </Button>
            </div>
          </div>
        )}

        {step === 'display' && (
          <div className="space-y-4">
            <Alert className="border-green-200 bg-green-50">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <AlertDescription className="text-green-800">
                Password successfully generated for <strong>{user.resource?.name || user.email}</strong>
              </AlertDescription>
            </Alert>

            <div className="space-y-3">
              <div className="text-sm font-medium text-gray-700">Generated Password:</div>
              <div className="relative">
                <Input
                  type={isPasswordVisible ? "text" : "password"}
                  value={generatedPassword}
                  readOnly
                  className="pr-10 font-mono text-sm bg-gray-50"
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  className="absolute right-1 top-1 h-8 w-8 p-0"
                  onClick={() => setIsPasswordVisible(!isPasswordVisible)}
                >
                  {isPasswordVisible ? (
                    <EyeOff className="h-4 w-4" />
                  ) : (
                    <Eye className="h-4 w-4" />
                  )}
                </Button>
              </div>
            </div>

            <Alert className="border-amber-200 bg-amber-50">
              <AlertTriangle className="h-4 w-4 text-amber-600" />
              <AlertDescription className="text-amber-800">
                <strong>Security Notice:</strong> This password is shown only once. Share securely with the user. 
                Treat as sensitive information and rotate if shared over insecure channels.
              </AlertDescription>
            </Alert>

            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={handleCopyPassword}
                className="flex-1"
              >
                <Copy className="h-4 w-4 mr-2" />
                Copy to Clipboard
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={handleDownloadPassword}
                className="flex-1"
              >
                <Download className="h-4 w-4 mr-2" />
                Download as .txt
              </Button>
            </div>

            <div className="flex justify-end">
              <Button onClick={handleClose} className="bg-blue-600 hover:bg-blue-700">
                Done
              </Button>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
